name: Prepare pipeline and set variables

on:
  workflow_call:
    outputs:
      dotnet_version:
        description: The version of .NET to use
        value: ${{ jobs.prepare-pipeline-vars.outputs.dotnet_version }}

      deploy_env:
        description: Deployment environment (prod, stag or dev)
        value: ${{ jobs.prepare-pipeline-vars.outputs.deploy_env }}

      solution_version:
        description: The version of the solution
        value: ${{ jobs.prepare-pipeline-vars.outputs.package_version_CLI }}

jobs:
  prepare-pipeline-vars:
    runs-on: ubuntu-latest

    outputs:
      dotnet_version: ${{ steps.pipeline-vars.outputs.DOTNET_VERSION }}
      deploy_env: ${{ steps.pipeline-vars.outputs.DEPLOY_ENV }}
      package_version_cli: ${{ steps.pipeline-vars.outputs.PACKAGE_VERSION_CLI }}
      package_version_csvdb: ${{ steps.pipeline-vars.outputs.PACKAGE_VERSION_CSVDB }}

    permissions:
      contents: write

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Get deployment variables
        id: pipeline-vars
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          echo "Checking .NET version..."

          DOTNET_VERSION="7.0.x"
          echo "DOTNET_VERSION=$DOTNET_VERSION"
          echo "DOTNET_VERSION=$DOTNET_VERSION" >> $GITHUB_OUTPUT


          echo "Checking deployment environment..."

          if [[ $BRANCH == "main" || $BRANCH == "master" ]]; then
            DEPLOY_ENV="prod"
          elif [[ $BRANCH == "staging" ]]; then
            DEPLOY_ENV="stag"
          else
            DEPLOY_ENV="dev"
          fi

          echo "DEPLOY_ENV=$DEPLOY_ENV"
          echo "DEPLOY_ENV=$DEPLOY_ENV" >> $GITHUB_OUTPUT


          echo "Checking package version..."

          if [[ $DEPLOY_ENV != "prod" ]]; then
            VERSION_SUFFIX="-$(git rev-parse --short HEAD)"
          fi

          SOLUTION_VERSION="$(cat VERSION)"
          echo "SOLUTION_VERSION=$SOLUTION_VERSION$VERSION_SUFFIX"
          echo "SOLUTION_VERSION=$SOLUTION_VERSION$VERSION_SUFFIX" >> $GITHUB_OUTPUT

      - name: Write pipeline vars summary
        run: |
          echo "### Prepare pipeline:
          <table>
            <tr>
              <td>ðŸ‘‘ .NET version</td>
              <td>${{ steps.pipeline-vars.outputs.DEPLOY_ENV }}</td>
            </tr>
            <tr>
              <td>ðŸŽ¯ Deployment environment</td>
              <td>${{ steps.pipeline-vars.outputs.DEPLOY_ENV }}</td>
            </tr>
            <tr>
              <td>ðŸš€ Solution version</td>
              <td>${{ steps.pipeline-vars.outputs.SOLUTION_VERSION }}</td>
            </tr>
          </table>" >> $GITHUB_STEP_SUMMARY

  prepare-azure:
    if: |
      needs.prepare-pipeline-vars.outputs.deploy_env == 'prod' ||
      needs.prepare-pipeline-vars.outputs.deploy_env == 'stag'
    runs-on: ubuntu-latest

    needs: prepare-pipeline-vars

    environment: ${{ needs.prepare-pipeline-vars.outputs.deploy_env }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Validate login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}

      - name: Azure CLI show account
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show
