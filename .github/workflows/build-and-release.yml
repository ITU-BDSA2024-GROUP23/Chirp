name: Release dotnet project

on:
  workflow_call:
    inputs:
      dotnet_version:
        description: The version of .NET to use
        required: true
        type: string

      deploy_env:
        description: Deployment environment (prod, stag or dev)
        required: true
        type: string

      solution_version:
        description: Package version
        required: true
        type: string

jobs:
  build-and-release-solution:
    if: inputs.deploy_env == 'prod' || inputs.deploy_env == 'stag'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version against official SemVer Regex
        env:
          SOLUTION_VERSION: ${{ inputs.solution_version }}
        run: |
          echo "Validating solution version $SOLUTION_VERSION"
          echo "$SOLUTION_VERSION" | grep -Pq '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'


      - name: Validate the solution version
        id: validate-version
        env:
          DEPLOY_ENV: ${{ inputs.deploy_env }}
          SOLUTION_VERSION: ${{ inputs.solution_version }}
        run: |
          if git rev-parse "refs/tags/$SOLUTION_VERSION" >/dev/null 2>&1; then
              echo "Tag $SOLUTION_VERSION already exists."
              echo "VERSION_CHANGE=false" >> $GITHUB_OUTPUT
          else
              echo "Tag $SOLUTION_VERSION does not exists."
              echo "VERSION_CHANGE=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Restore project dependencies
        run: dotnet restore

      - name: Build and zip the solution for Windows
        run: |
          dotnet publish Chirp.sln -c Release -r win-x64 --self-contained -o chirp-win-x64
          zip -r chirp-win-x64.zip chirp-win-x64

      - name: Build and zip the solution for Linux
        run: |
          dotnet publish Chirp.sln -c Release -r linux-x64 --self-contained -o chirp-linux-x64
          zip -r chirp-linux-x64.zip chirp-linux-x64

      - name: Build and zip the solution for MacOS
        run: |
          dotnet publish Chirp.sln -c Release -r osx-x64 --self-contained -o chirp-osx-x64
          zip -r chirp-osx-x64.zip chirp-osx-x64

      - name: Archive the solution packages
        uses: actions/upload-artifact@v4
        with:
          name: chirp
          path: |
            chirp-win-x64.zip
            chirp-linux-x64.zip
            chirp-osx-x64.zip

      - name: Create a GitHub release
        if: steps.validate-version.outputs.VERSION_CHANGE == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.solution_version }}
          prerelease: ${{ inputs.deploy_env != 'prod' }}
          generate_release_notes: false
          make_latest: true
          files: |
            chirp-win-x64.zip
            chirp-linux-x64.zip
            chirp-osx-x64.zip
